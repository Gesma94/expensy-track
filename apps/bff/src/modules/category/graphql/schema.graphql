enum CategoryType {
  EXPANSE
  INCOME
  TRANSFER
}

enum CategoryIcon {
  CONFETTI
  CAR
  RAMEN
  GUITAR
  BRIEFCASE
  MONEYBAG
  PIZZA
  HOME
  SOCCER_BALL
  POPCORN
}

type Category {
  id: ID!
  displayName: String!
  color: String!
  type: CategoryType!
  icon: CategoryIcon!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: ID!
  user: User
  parentCategoryId: ID
  parentCategory: Category
  subCategories: [Category!]
}

type CategoriesByType {
  counter: Int!
  categories: [Category!]!
}

type GroupedCategories {
  incomeCategories: CategoriesByType!
  expanseCategories: CategoriesByType!
}

type CategoriesResult implements Response {
  success: Boolean!
  error: GraphqlError
  result: [Category!]
}

type CategoriesByTypeResult implements Response {
  success: Boolean!
  error: GraphqlError
  result: GroupedCategories
}

type CreateCategoryResult implements Response {
  success: Boolean!
  error: GraphqlError
  result: Category
}

type DeleteCategoriesResult implements Response {
  success: Boolean!
  error: GraphqlError
  result: Int
}

type EditCategoryResult implements Response {
  success: Boolean!
  error: GraphqlError
  result: Category
}

input EditCategoryInput {
  id: ID!
  displayName: String!
  color: String!
  icon: CategoryIcon!
  parentCategoryId: ID
}

input CreateCategoryInput {
  color: String!
  type: CategoryType!
  icon: CategoryIcon!
  displayName: String!
  parentCategoryId: ID
}

input DeleteCategoriesInput {
  ids: [ID!]!
}

type Query {
  categories: CategoriesResult
  categoriesByType: CategoriesByTypeResult
}

type Mutation {
  createCategory(input: CreateCategoryInput!): CreateCategoryResult
  editCategory(input: EditCategoryInput!): EditCategoryResult
  deleteCategories(input: DeleteCategoriesInput!): DeleteCategoriesResult
}
